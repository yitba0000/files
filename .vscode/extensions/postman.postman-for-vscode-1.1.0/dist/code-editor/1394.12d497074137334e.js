"use strict";(self.webpackChunkcode_editor=self.webpackChunkcode_editor||[]).push([[1394],{11394:e=>{e.exports='// Type definitions for postman-sandbox 3.5.7\n// Project: https://github.com/postmanlabs/postman-sandbox\n// Definitions by: PostmanLabs\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.4\n/// <reference types="node" />\ndeclare var postman: PostmanLegacy;\n\ndeclare interface PostmanLegacy {\n    /***\n     * Sets the next request to be executed.\n     * @param requestName Name of the next request to be executed.\n     */\n    setNextRequest(requestName: string): void;\n}\n\ndeclare class Postman {\n    constructor(bridge: EventEmitter, execution: Execution, onRequest: (...params: any[]) => any, cookieStore: any);\n    /**\n     * The pm.info object contains information pertaining to the script being executed.\n     * Useful information such as the request name, request Id, and iteration count are\n     * stored inside of this object.\n     */\n    info: Info;\n    globals: import("postman-collection").VariableScope;\n    environment: import("postman-collection").VariableScope;\n    collectionVariables: import("postman-collection").VariableScope;\n    variables: import("postman-collection").VariableScope;\n    /**\n     * The iterationData object contains data from the data file provided during a collection run.\n     */\n    iterationData: import("postman-collection").VariableScope;\n    /**\n     * The request object inside pm is a representation of the request for which this script is being run.\n     * For a pre-request script, this is the request that is about to be sent and when in a test script,\n     * this is the representation of the request that was sent.\n     */\n    request: import("postman-collection").Request;\n    /**\n     * The cookies object contains a list of cookies that are associated with the domain\n     * to which the request was made.\n     */\n    cookies: import("postman-collection").CookieList;\n    visualizer: Visualizer;\n    /**\n     * Allows one to send request from script asynchronously.\n     */\n    sendRequest(req: import("postman-collection").Request | string, callback: (...params: any[]) => any): void;\n    expect: Chai.ExpectStatic;\n}\n\n/**\n * Contains information pertaining to the script execution\n */\ndeclare interface Info {\n    /**\n     * Contains information whether the script being executed is a "prerequest" or a "test" script.\n     */\n    eventName: string;\n    /**\n     * Is the value of the current iteration being run.\n     */\n    iteration: number;\n    /**\n     * Is the total number of iterations that are scheduled to run.\n     */\n    iterationCount: number;\n    /**\n     * The saved name of the individual request being run.\n     */\n    requestName: string;\n    /**\n     * The unique guid that identifies the request being run.\n     */\n    requestId: string;\n}\n\ndeclare interface Visualizer {\n    /**\n     * Set visualizer template and its options\n     * @param template - visualisation layout in form of template\n     * @param [data] - data object to be used in template\n     * @param [options] - options to use while processing the template\n     */\n    set(template: string, data?: any, options?: any): void;\n    /**\n     * Clear all visualizer data\n     */\n    clear(): void;\n}\n\n/**\n * The pm object encloses all information pertaining to the script being executed and\n * allows one to access a copy of the request being sent or the response received.\n * It also allows one to get and set environment and global variables.\n */\ndeclare var pm: Postman;\n\ndeclare interface PostmanCookieJar {\n    /**\n     * Get the cookie value with the given name.\n     */\n    get(url: string, name: string, callback: (...params: any[]) => any): void;\n    /**\n     * Get all the cookies for the given URL.\n     */\n    getAll(url: string, options?: any, callback: (...params: any[]) => any): void;\n    /**\n     * Set or update a cookie.\n     */\n    set(url: string, name: string | any, value?: string | ((...params: any[]) => any), callback?: (...params: any[]) => any): void;\n    /**\n     * Remove single cookie with the given name.\n     */\n    unset(url: string, name: string, callback?: (...params: any[]) => any): void;\n    /**\n     * Remove all the cookies for the given URL.\n     */\n    clear(url: string, callback?: (...params: any[]) => any): void;\n}\n\n\n\ninterface Postman {\n    test: Test;\n}\n\ninterface Test {\n\n    /**\n     * You can use this function to write test specifications inside either the Pre-request Script or Tests sandbox.\n     * Writing tests inside this function allows you to name the test accurately and this function also ensures the\n     * rest of the script is not blocked even if there are errors inside the function.\n     * @param testName\n     * @param specFunction\n     */\n    (testName: string, specFunction: Function): void\n\n    /**\n     * Get the total number tests from a specific location.\n     */\n    index(): number,\n\n    /**\n     * By appending .skip(), you may tell test runner to ignore test case.\n     * @param testName\n     */\n    skip(testName: string): void\n}\n\ndeclare module "postman-collection" {\n\ninterface CookieList {\n    jar() : PostmanCookieJar\n}\n\n}\n'}}]);